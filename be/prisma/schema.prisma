// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
  binaryTargets   = ["linux-musl-openssl-3.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String   @db.VarChar(50)
  email           String?  @unique @db.VarChar(100)
  passwordHash    String   @db.VarChar(60)
  createdAt       DateTime @default(now())
  passwordVersion Int      @default(1)

  // Relations
  notes         Note[]
  notebooks     Notebook[]
  refreshTokens RefreshToken[]

  @@index([email, username])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notebook {
  id           String         @id @default(uuid())
  name         String         @db.VarChar(100)
  description  String
  createdAt    DateTime       @default(now())
  // Relations
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  notes        Note[]
  NotebookNote NotebookNote[]

  @@index([createdAt, userId])
}

model Note {
  id           String         @id @default(uuid())
  title        String         @db.VarChar(300)
  content      String
  isPublic     Boolean        @default(false)
  version      Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  pinned       Boolean        @default(false)
  isDeleted    Boolean        @default(false)
  // Relations
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  notebooks    Notebook[]
  NotebookNote NotebookNote[]
}

model NotebookNote {
  createdAt  DateTime @default(now())
  // Relations
  note       Note     @relation(fields: [noteId], references: [id])
  noteId     String
  notebook   Notebook @relation(fields: [notebookId], references: [id])
  notebookId String

  @@id([noteId, notebookId])
}
