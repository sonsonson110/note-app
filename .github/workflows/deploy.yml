name: Build and Deploy

# workflow is triggered manually or any new push to main branch
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Azure Login
      uses: Azure/login@v2.2.0
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    - name: Get runner IP
      id: ip
      uses: haythem/public-ip@v1.3

    - name: Add IP to firewall
      run: |
        az postgres server firewall-rule create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --server-name ${{ secrets.AZURE_POSTGRES_SERVER_NAME }} \
          --name GithubRunner \
          --start-ip-address ${{ steps.ip.outputs.ipv4 }} \
          --end-ip-address ${{ steps.ip.outputs.ipv4 }}

    - name: Login to ACR
      uses: azure/docker-login@v2
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push backend image
      run: |
        docker build \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          -t ${{ secrets.ACR_LOGIN_SERVER }}/note-app-backend:latest \
          -f ./be/Dockerfile.prod ./be
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/note-app-backend:latest
    
    - name: Remove IP from firewall
      if: always()
      run: |
        az postgres server firewall-rule delete \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --server-name ${{ secrets.AZURE_POSTGRES_SERVER_NAME }} \
          --name GithubRunner

    - name: Build and push frontend image
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/note-app-frontend:latest -f ./fe/Dockerfile.prod ./fe
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/note-app-frontend:latest
    
    - name: Deploy to Azure VM
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
        AZURE_VM_SSH_PRIVATE_KEY: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
        AZURE_APPLICATION_ID: ${{ secrets.AZURE_APPLICATION_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        # Create private key file
        echo "$AZURE_VM_SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key

        ssh -o StrictHostKeyChecking=no -i private_key ${AZURE_VM_USER}@${AZURE_VM_IP} << EOF
          az login --service-principal --username ${AZURE_APPLICATION_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
          az acr login --name devopslearningregistry1
          cd ./note-app

          # Create .env file for docker-compose
          cat > .env << EOL
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          EOL

          make pull-deploy
        EOF